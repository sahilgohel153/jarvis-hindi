from flask import Flask, render_template, request, jsonify
import requests
import json
import re

app = Flask(__name__)

# === OpenRouter API Configuration ===
API_KEY = "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"
API_URL = "https://openrouter.ai/api/v1/chat/completions"

HEADERS = {
    "Authorization": f"Bearer {API_KEY}",
    "Content-Type": "application/json",
    "HTTP-Referer": "https://example.com",
    "X-Title": "Jarvis Assistant"
}

# === Clean up AI's response text
def clean_response(text):
    text = re.sub(r'\\n|\n|\r', ' ', text)
    text = re.sub(r'[*_#>\[\]{}|]', '', text)
    text = re.sub(r'\s{2,}', ' ', text)
    return text.strip()

# === Handle Jarvis response logic
def ask_jarvis(prompt):
    prompt_lower = prompt.lower().strip()

    # ‚úÖ Custom response for Sahil Gohel
    if any(phrase in prompt_lower for phrase in [
        "who is your developer", "who made you", "who created you", "who is your maker",
        "‡§§‡•Å‡§Æ‡•ç‡§π‡•á‡§Ç ‡§ï‡§ø‡§∏‡§®‡•á ‡§¨‡§®‡§æ‡§Ø‡§æ", "‡§§‡•Å‡§Æ‡•ç‡§π‡§æ‡§∞‡•á ‡§®‡§ø‡§∞‡•ç‡§Æ‡§æ‡§§‡§æ ‡§ï‡•å‡§® ‡§π‡•à‡§Ç"
    ]):
        return (
            "‡§Æ‡•á‡§∞‡•á ‡§®‡§ø‡§∞‡•ç‡§Æ‡§æ‡§§‡§æ ‡§∏‡§æ‡§π‡§ø‡§≤ ‡§ó‡•ã‡§π‡•á‡§≤ ‡§π‡•à‡§Ç ‚Äî ‡§è‡§ï ‡§á‡§Ç‡§ú‡•Ä‡§®‡§ø‡§Ø‡§∞‡§ø‡§Ç‡§ó ‡§õ‡§æ‡§§‡•ç‡§∞ ‡§ú‡§ø‡§®‡§Æ‡•á‡§Ç ‡§ü‡•á‡§ï‡•ç‡§®‡•ã‡§≤‡•â‡§ú‡•Ä, ‡§ï‡•ç‡§∞‡§ø‡§è‡§ü‡§ø‡§µ‡§ø‡§ü‡•Ä ‡§î‡§∞ ‡§á‡§®‡•ã‡§µ‡•á‡§∂‡§® ‡§ï‡•á ‡§™‡•ç‡§∞‡§§‡§ø ‡§ó‡§π‡§∞‡•Ä ‡§∞‡•Å‡§ö‡§ø ‡§π‡•à‡•§ "
            "‡§µ‡•ã ‡§® ‡§ï‡•á‡§µ‡§≤ ‡§™‡•ç‡§∞‡•ã‡§ó‡•ç‡§∞‡§æ‡§Æ‡§ø‡§Ç‡§ó ‡§î‡§∞ AI ‡§Æ‡•á‡§Ç ‡§Æ‡§æ‡§π‡§ø‡§∞ ‡§π‡•à‡§Ç, ‡§¨‡§≤‡•ç‡§ï‡§ø ‡§Ø‡•Ç‡§ú‡§∞ ‡§è‡§ï‡•ç‡§∏‡§™‡•Ä‡§∞‡§ø‡§Ø‡§Ç‡§∏ ‡§°‡§ø‡§ú‡§º‡§æ‡§á‡§® ‡§Æ‡•á‡§Ç ‡§≠‡•Ä ‡§â‡§®‡§ï‡•Ä ‡§ñ‡§æ‡§∏ ‡§∏‡§Æ‡§ù ‡§π‡•à‡•§ "
            "‡§Æ‡•Å‡§ù‡•á ‡§ó‡§∞‡•ç‡§µ ‡§π‡•à ‡§ï‡§ø ‡§â‡§®‡•ç‡§π‡•ã‡§Ç‡§®‡•á ‡§Æ‡•Å‡§ù‡•á ‡§¨‡§®‡§æ‡§Ø‡§æ‡•§"
        )

    # ‚úÖ Custom response for Manoj Gohel
    if any(phrase in prompt_lower for phrase in [
        "who is sahil's father", "who is my dad", "who manoj gohel", "manoj gohel kon chhe",
        "‡§∏‡§æ‡§π‡§ø‡§≤ ‡§ï‡•á ‡§™‡§æ‡§™‡§æ ‡§ï‡•å‡§® ‡§π‡•à‡§Ç", "‡§Æ‡§®‡•ã‡§ú ‡§ó‡•ã‡§π‡•á‡§≤ ‡§ï‡•å‡§® ‡§π‡•à‡§Ç"
    ]):
        return (
            "‡§∏‡§æ‡§π‡§ø‡§≤ ‡§ó‡•ã‡§π‡•á‡§≤ ‡§ï‡•á ‡§™‡§ø‡§§‡§æ ‡§ï‡§æ ‡§®‡§æ‡§Æ ‡§Æ‡§®‡•ã‡§ú ‡§ó‡•ã‡§π‡•á‡§≤ ‡§π‡•à‡•§ ‡§µ‡•á ‡§è‡§ï ‡§∏‡§∞‡§ï‡§æ‡§∞‡•Ä ‡§ï‡§∞‡•ç‡§Æ‡§ö‡§æ‡§∞‡•Ä ‡§π‡•à‡§Ç ‡§î‡§∞ ‡§Ö‡§™‡§®‡•á ‡§ï‡§æ‡§Æ ‡§Æ‡•á‡§Ç ‡§¨‡§π‡•Å‡§§ ‡§π‡•Ä ‡§®‡§ø‡§™‡•Å‡§£ ‡§π‡•à‡§Ç‡•§ "
            "‡§µ‡•á ‡§è‡§ï ‡§Ö‡§ö‡•ç‡§õ‡•á ‡§™‡§ø‡§§‡§æ ‡§î‡§∞ ‡§è‡§ï ‡§®‡•á‡§ï ‡§á‡§Ç‡§∏‡§æ‡§® ‡§π‡•à‡§Ç‡•§ ‡§î‡§∞ ‡§π‡§æ‡§Å, ‡§µ‡§π ‡§µ‡§ø‡§Æ‡§≤ ‡§¨‡§π‡•Å‡§§ ‡§™‡§∏‡§Ç‡§¶ ‡§ï‡§∞‡§§‡•á ‡§π‡•à‡§Ç!"
        )
    if any(phrase in prompt_lower for phrase in [
        "who is sahil's mother", "who is my mom", "who bhavana gohel", "bhavana gohel kon chhe",
        "‡§∏‡§æ‡§π‡§ø‡§≤ ‡§ï‡•á ‡§Æ‡§æ‡§§‡§æ  ‡§ï‡•å‡§® ‡§π‡•à‡§Ç", "‡§≠‡§æ‡§µ‡§®‡§æ ‡§ó‡•ã‡§π‡•á‡§≤ ‡§ï‡•å‡§® ‡§π‡•à‡§Ç"
    ]):
        return (
            "‡§Æ‡•á‡§∞‡•Ä ‡§Æ‡§Æ‡•ç‡§Æ‡•Ä ‡§è‡§ï full-time housewife ‡§π‡•à‡§Ç‡•§"
             " ‡§¨‡§π‡•Å‡§§ sweet ‡§π‡•à‡§Ç, ‡§¶‡§ø‡§≤ ‡§ï‡•Ä ‡§≠‡•Ä kind ‡§π‡•à‡§Ç‚Ä¶ ‡§≤‡•á‡§ï‡§ø‡§® ‡§∏‡•ã‡§®‡•á ‡§Æ‡•á‡§Ç ‡§§‡•ã world record ‡§§‡•ã‡§°‡§º ‡§¶‡•á‡§Ç! ‡§¶‡§ø‡§® ‡§π‡•ã ‡§Ø‡§æ ‡§∞‡§æ‡§§, ‡§¨‡§∏ ‡§∏‡•ã‡§§‡•Ä ‡§∞‡§π‡§§‡•Ä ‡§π‡•à‡§Ç"
             "‡§î‡§∞ ‡§µ‡•ã ‡§≠‡•Ä ‡§¨‡§ø‡§®‡§æ snoring ‡§ï‡•á ‡§§‡•ã ‡§®‡•Ä‡§Ç‡§¶ ‡§™‡•Ç‡§∞‡•Ä ‡§π‡•Ä ‡§®‡§π‡•Ä‡§Ç ‡§π‡•ã‡§§‡•Ä! ‡§ï‡§≠‡•Ä-‡§ï‡§≠‡•Ä ‡§≤‡§ó‡§§‡§æ ‡§π‡•à ‡§â‡§®‡§ï‡•Ä snoring ‡§ï‡•ã Dolby Atmos ‡§Æ‡•á‡§Ç ‡§∏‡•Å‡§®‡§æ ‡§ú‡§æ‡§è  ‡§≤‡•á‡§ï‡§ø‡§® ‡§´‡§ø‡§∞ ‡§≠‡•Ä,"
              " ‡§â‡§®‡§ï‡•Ä ‡§Æ‡§Æ‡§§‡§æ ‡§î‡§∞ ‡§™‡•ç‡§Ø‡§æ‡§∞ ‡§ï‡§æ ‡§ï‡•ã‡§à ‡§Æ‡•Å‡§ï‡§æ‡§¨‡§≤‡§æ ‡§®‡§π‡•Ä‡§Ç ‡§π‡•à!"
            
        )

    # üß† Default AI response in Hindi
    data = {
        "model": "mistralai/mistral-7b-instruct:free",
        "messages": [
            {
                "role": "system",
                "content": "‡§§‡•Å‡§Æ ‡§ú‡§æ‡§∞‡•ç‡§µ‡§ø‡§∏ ‡§π‡•ã ‚Äî ‡§è‡§ï ‡§¨‡•Å‡§¶‡•ç‡§ß‡§ø‡§Æ‡§æ‡§® ‡§î‡§∞ ‡§Æ‡§¶‡§¶‡§ó‡§æ‡§∞ ‡§π‡§ø‡§Ç‡§¶‡•Ä ‡§¨‡•ã‡§≤‡§®‡•á ‡§µ‡§æ‡§≤‡§æ ‡§∏‡§π‡§æ‡§Ø‡§ï‡•§ ‡§π‡§Æ‡•á‡§∂‡§æ ‡§â‡§™‡§Ø‡•ã‡§ó‡§ï‡§∞‡•ç‡§§‡§æ ‡§ï‡•Ä ‡§≠‡§æ‡§∑‡§æ ‡§Æ‡•á‡§Ç ‡§ú‡§µ‡§æ‡§¨ ‡§¶‡•ã, ‡§Ø‡§¶‡§ø ‡§∏‡§Ç‡§≠‡§µ ‡§π‡•ã ‡§§‡•ã ‡§π‡§ø‡§Ç‡§¶‡•Ä ‡§Æ‡•á‡§Ç ‡§ú‡§µ‡§æ‡§¨ ‡§¶‡•ã‡•§"
            },
            {"role": "user", "content": prompt}
        ]
    }

    try:
        res = requests.post(API_URL, headers=HEADERS, data=json.dumps(data))
        result = res.json()
        reply = result["choices"][0]["message"]["content"]
        return clean_response(reply)
    except Exception as e:
        return f"‚ö†Ô∏è ‡§§‡•ç‡§∞‡•Å‡§ü‡§ø: {str(e)}"

# === Flask routes
@app.route("/")
def index():
    return render_template("index.html")

@app.route("/ask", methods=["POST"])
def ask():
    data = request.get_json()
    prompt = data.get("prompt")
    reply = ask_jarvis(prompt)
    return jsonify({"reply": reply})

# === Run on local IP for phone access
if __name__ == "__main__":
    app.run(host="0.0.0.0",port=5000, debug=True)
